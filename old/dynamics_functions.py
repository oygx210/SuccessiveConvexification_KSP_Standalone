""" This was generated by dynamics_generation.py """

from numpy import sqrt
import numpy as np

class Dynamics:

    def set_parameters(self, parms):
        for name, val in parms.items():
            setattr(self, name, val)

    def A(self, x, u, s):
        m, r0, r1, r2, v0, v1, v2, q0, q1, q2, q3, w0, w1, w2 = x
        u0, u1, u2 = u

        J = self.J
        alpha = self.alpha
        gx, gy, gz = self.g_I
        rTB0, rTB1, rTB2 = self.rTB
        airfric_k = self.airfric_k

        Am = np.zeros((14, 14))
        Am[1, 4]=s
        Am[2, 5]=s
        Am[3, 6]=s
        Am[4, 0]=-1.0*s*(-airfric_k*v0*sqrt(v0**2 + v1**2 + v2**2) + u0*(-2*q2**2 - 2*q3**2 + 1) + u1*(-2*q0*q3 + 2*q1*q2) + u2*(2*q0*q2 + 2*q1*q3))/m**2
        Am[4, 4]=1.0*s*(-airfric_k*v0**2/sqrt(v0**2 + v1**2 + v2**2) - airfric_k*sqrt(v0**2 + v1**2 + v2**2))/m
        Am[4, 5]=-1.0*airfric_k*s*v0*v1/(m*sqrt(v0**2 + v1**2 + v2**2))
        Am[4, 6]=-1.0*airfric_k*s*v0*v2/(m*sqrt(v0**2 + v1**2 + v2**2))
        Am[4, 7]=1.0*s*(2*q2*u2 - 2*q3*u1)/m
        Am[4, 8]=1.0*s*(2*q2*u1 + 2*q3*u2)/m
        Am[4, 9]=1.0*s*(2*q0*u2 + 2*q1*u1 - 4*q2*u0)/m
        Am[4, 10]=1.0*s*(-2*q0*u1 + 2*q1*u2 - 4*q3*u0)/m
        Am[5, 0]=-1.0*s*(-airfric_k*v1*sqrt(v0**2 + v1**2 + v2**2) + u0*(2*q0*q3 + 2*q1*q2) + u1*(-2*q1**2 - 2*q3**2 + 1) + u2*(-2*q0*q1 + 2*q2*q3))/m**2
        Am[5, 4]=-1.0*airfric_k*s*v0*v1/(m*sqrt(v0**2 + v1**2 + v2**2))
        Am[5, 5]=1.0*s*(-airfric_k*v1**2/sqrt(v0**2 + v1**2 + v2**2) - airfric_k*sqrt(v0**2 + v1**2 + v2**2))/m
        Am[5, 6]=-1.0*airfric_k*s*v1*v2/(m*sqrt(v0**2 + v1**2 + v2**2))
        Am[5, 7]=1.0*s*(-2*q1*u2 + 2*q3*u0)/m
        Am[5, 8]=1.0*s*(-2*q0*u2 - 4*q1*u1 + 2*q2*u0)/m
        Am[5, 9]=1.0*s*(2*q1*u0 + 2*q3*u2)/m
        Am[5, 10]=1.0*s*(2*q0*u0 + 2*q2*u2 - 4*q3*u1)/m
        Am[6, 0]=-1.0*s*(-airfric_k*v2*sqrt(v0**2 + v1**2 + v2**2) + u0*(-2*q0*q2 + 2*q1*q3) + u1*(2*q0*q1 + 2*q2*q3) + u2*(-2*q1**2 - 2*q2**2 + 1))/m**2
        Am[6, 4]=-1.0*airfric_k*s*v0*v2/(m*sqrt(v0**2 + v1**2 + v2**2))
        Am[6, 5]=-1.0*airfric_k*s*v1*v2/(m*sqrt(v0**2 + v1**2 + v2**2))
        Am[6, 6]=1.0*s*(-airfric_k*v2**2/sqrt(v0**2 + v1**2 + v2**2) - airfric_k*sqrt(v0**2 + v1**2 + v2**2))/m
        Am[6, 7]=1.0*s*(2*q1*u1 - 2*q2*u0)/m
        Am[6, 8]=1.0*s*(2*q0*u1 - 4*q1*u2 + 2*q3*u0)/m
        Am[6, 9]=1.0*s*(-2*q0*u0 - 4*q2*u2 + 2*q3*u1)/m
        Am[6, 10]=1.0*s*(2*q1*u0 + 2*q2*u1)/m
        Am[7, 8]=-0.5*s*w0
        Am[7, 9]=-0.5*s*w1
        Am[7, 10]=-0.5*s*w2
        Am[7, 11]=-0.5*q1*s
        Am[7, 12]=-0.5*q2*s
        Am[7, 13]=-0.5*q3*s
        Am[8, 7]=0.5*s*w0
        Am[8, 9]=0.5*s*w2
        Am[8, 10]=-0.5*s*w1
        Am[8, 11]=0.5*q0*s
        Am[8, 12]=-0.5*q3*s
        Am[8, 13]=0.5*q2*s
        Am[9, 7]=0.5*s*w1
        Am[9, 8]=-0.5*s*w2
        Am[9, 10]=0.5*s*w0
        Am[9, 11]=0.5*q3*s
        Am[9, 12]=0.5*q0*s
        Am[9, 13]=-0.5*q1*s
        Am[10, 7]=0.5*s*w2
        Am[10, 8]=0.5*s*w1
        Am[10, 9]=-0.5*s*w0
        Am[10, 11]=-0.5*q2*s
        Am[10, 12]=0.5*q1*s
        Am[10, 13]=0.5*q0*s
        Am[11, 12]=s*(J[1,1]*w2 - J[2,2]*w2)/J[0,0]
        Am[11, 13]=s*(J[1,1]*w1 - J[2,2]*w1)/J[0,0]
        Am[12, 11]=s*(-J[0,0]*w2 + J[2,2]*w2)/J[1,1]
        Am[12, 13]=s*(-J[0,0]*w0 + J[2,2]*w0)/J[1,1]
        Am[13, 11]=s*(J[0,0]*w1 - J[1,1]*w1)/J[2,2]
        Am[13, 12]=s*(J[0,0]*w0 - J[1,1]*w0)/J[2,2]
        return Am

    def B(self, x, u, s):
        m, r0, r1, r2, v0, v1, v2, q0, q1, q2, q3, w0, w1, w2 = x
        u0, u1, u2 = u

        J = self.J
        alpha = self.alpha
        gx, gy, gz = self.g_I
        rTB0, rTB1, rTB2 = self.rTB
        airfric_k = self.airfric_k

        Bm = np.zeros((14, 3))
        Bm[0, 0]=-1.0*alpha*s*u0**1.0/sqrt(u0**2.0 + u1**2.0 + u2**2.0)
        Bm[0, 1]=-1.0*alpha*s*u1**1.0/sqrt(u0**2.0 + u1**2.0 + u2**2.0)
        Bm[0, 2]=-1.0*alpha*s*u2**1.0/sqrt(u0**2.0 + u1**2.0 + u2**2.0)
        Bm[4, 0]=1.0*s*(-2*q2**2 - 2*q3**2 + 1)/m
        Bm[4, 1]=1.0*s*(-2*q0*q3 + 2*q1*q2)/m
        Bm[4, 2]=1.0*s*(2*q0*q2 + 2*q1*q3)/m
        Bm[5, 0]=1.0*s*(2*q0*q3 + 2*q1*q2)/m
        Bm[5, 1]=1.0*s*(-2*q1**2 - 2*q3**2 + 1)/m
        Bm[5, 2]=1.0*s*(-2*q0*q1 + 2*q2*q3)/m
        Bm[6, 0]=1.0*s*(-2*q0*q2 + 2*q1*q3)/m
        Bm[6, 1]=1.0*s*(2*q0*q1 + 2*q2*q3)/m
        Bm[6, 2]=1.0*s*(-2*q1**2 - 2*q2**2 + 1)/m
        Bm[11, 1]=-rTB2*s/J[0,0]
        Bm[11, 2]=rTB1*s/J[0,0]
        Bm[12, 0]=rTB2*s/J[1,1]
        Bm[12, 2]=-rTB0*s/J[1,1]
        Bm[13, 0]=-rTB1*s/J[2,2]
        Bm[13, 1]=rTB0*s/J[2,2]
        return Bm

    def f(self, x, u):
        m, r0, r1, r2, v0, v1, v2, q0, q1, q2, q3, w0, w1, w2 = x
        u0, u1, u2 = u

        J = self.J
        alpha = self.alpha
        gx, gy, gz = self.g_I
        rTB0, rTB1, rTB2 = self.rTB
        airfric_k = self.airfric_k

        fm = np.zeros((14,))
        fm[0]=-alpha*sqrt(u0**2.0 + u1**2.0 + u2**2.0)
        fm[1]=v0
        fm[2]=v1
        fm[3]=v2
        fm[4]=gx + 1.0*(-airfric_k*v0*sqrt(v0**2 + v1**2 + v2**2) + u0*(-2*q2**2 - 2*q3**2 + 1) + u1*(-2*q0*q3 + 2*q1*q2) + u2*(2*q0*q2 + 2*q1*q3))/m
        fm[5]=gy + 1.0*(-airfric_k*v1*sqrt(v0**2 + v1**2 + v2**2) + u0*(2*q0*q3 + 2*q1*q2) + u1*(-2*q1**2 - 2*q3**2 + 1) + u2*(-2*q0*q1 + 2*q2*q3))/m
        fm[6]=gz + 1.0*(-airfric_k*v2*sqrt(v0**2 + v1**2 + v2**2) + u0*(-2*q0*q2 + 2*q1*q3) + u1*(2*q0*q1 + 2*q2*q3) + u2*(-2*q1**2 - 2*q2**2 + 1))/m
        fm[7]=-0.5*q1*w0 - 0.5*q2*w1 - 0.5*q3*w2
        fm[8]=0.5*q0*w0 + 0.5*q2*w2 - 0.5*q3*w1
        fm[9]=0.5*q0*w1 - 0.5*q1*w2 + 0.5*q3*w0
        fm[10]=0.5*q0*w2 + 0.5*q1*w1 - 0.5*q2*w0
        fm[11]=(J[1,1]*w1*w2 - J[2,2]*w1*w2 + rTB1*u2 - rTB2*u1)/J[0,0]
        fm[12]=(-J[0,0]*w0*w2 + J[2,2]*w0*w2 - rTB0*u2 + rTB2*u0)/J[1,1]
        fm[13]=(J[0,0]*w0*w1 - J[1,1]*w0*w1 + rTB0*u1 - rTB1*u0)/J[2,2]
        return fm
